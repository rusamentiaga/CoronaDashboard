@model CoronaDashboard.Web.Models.PlotViewModel
@using Newtonsoft.Json;

<script src="~/js/palette.js"></script>

<script src="https://code.jquery.com/jquery-1.11.3.js"
		integrity="sha256-IGWuzKD7mwVnNY01LtXxq3L84Tm/RJtNCYBfXZw3Je0="
		crossorigin="anonymous"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/series-label.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>
<script src="https://code.highcharts.com/modules/accessibility.js"></script>

<figure class="highcharts-figure">
	<div id="plot"></div>
</figure>

<!--
<div id="ChartType" style="float:left;" class="btn-group btn-group-toggle" data-toggle="buttons">
	<label class="btn active">
		<input type="radio" name="mode" id="linearRadio" checked> Linear
	</label>
	<label class="btn">
		<input type="radio" name="mode" id="logarithmicRadio"> Logarithmic
	</label>
</div>
-->

<div style="float:right;">
	<button type="button" class="btn btn-secondary" id="America">America</button>
	<button type="button" class="btn btn-secondary" id="Europe">Europe</button>
	<button type="button" class="btn btn-secondary" id="All">All</button>
</div>
<div style="clear: both;"></div>

<figure class="highcharts-figure-last">
	<div id="bar"></div>
</figure>

@{
	double hours = (DateTime.UtcNow - Model.UpdateTime).TotalHours;
	string hoursStr = String.Format("{0:0.0}", hours);
}

<script>
	let numcolorspal = Math.min(@Model.Series.Count, 65);
	colorpal = palette('mpn65', numcolorspal);

	for (let i = 0; i < colorpal.length; i++) {
		colorpal[i] = '#' + colorpal[i];
	}

	Highcharts.seriesTypes.line.prototype.getPointSpline = Highcharts.seriesTypes.spline.prototype.getPointSpline;
	var chartPlot = Highcharts.chart('plot', {

		colors: colorpal,

		chart: {
			height: 600,
			zoomType: "xy",
			panning: true,
			panKey: 'shift',
			//type: 'spline'
		},
		tooltip: {
			pointFormat: '{series.name}: <b>{point.y:.@ViewData["TooltipDecimals"]f}</b><br/>',
			valueSuffix: ' cm',
			shared: false
		},
		credits: {
			enabled: false
		},

		exporting: {
			enabled: false
		},

		title: {
			text: 'Coronavirus @ViewData["Metric"]'
		},

		subtitle: {
			useHTML: true,
			text: 'Data source: <a href=" https://github.com/CSSEGISandData/COVID-19">CSSE</a> (updated @hoursStr hours ago)'
		},

		yAxis: {
			type: '@ViewData["YType"]',
			title: {
				text: '@Html.Raw(ViewData["YLabel"])'
			}
		},

		xAxis: {
			/*
			allowDecimals: false,
			title: {
				text: '@Html.Raw(ViewData["XLabel"])'
			},
		*/
			type: 'datetime',
		},

		legend: {
			layout: 'vertical',
			align: 'right',
			verticalAlign: 'middle'
		},

		plotOptions: {
			series: {
				label: {
					connectorAllowed: false
				},
				pointInterval: 1000 * 3600 * 24,
				pointStart: Date.UTC(2020, 0, 22, 0, 0, 0)
			},
		},

		series: @Html.Raw(JsonConvert.SerializeObject(Model.Series)),

		responsive: {
			rules: [{
				condition: {
					maxWidth: 500
				},
				chartOptions: {
					legend: {
						layout: 'horizontal',
						align: 'center',
						verticalAlign: 'bottom'
					}
				}
			}]
		}
	});

	let seriesLast = @Html.Raw(JsonConvert.SerializeObject(Model.SeriesLast));

	chartBar = Highcharts.chart('bar', {
		chart: {
			height: 300,
			type: 'column'
		},
		credits: {
			enabled: false
		},

		exporting: {
			enabled: false
		},
		title: {
			text: ''
		},
		subtitle: {
			text: 'Most recent data'
		},
		accessibility: {
			announceNewData: {
				enabled: true
			}
		},
		xAxis: {
			type: 'category'
		},
		yAxis: {
			title: {
				text: '@Html.Raw(ViewData["YLabel"])'
			}

		},
		legend: {
			enabled: false
		},
		plotOptions: {
			series: {
				borderWidth: 0,
				dataLabels: {
					enabled: true,
					format: '{point.y:.@ViewData["TooltipDecimals"]f}'
				}
			}
		},

		tooltip: {
			headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
			pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.@ViewData["TooltipDecimals"]f}</b><br/>'
		},

		series: [
			{
				name: '@Html.Raw(ViewData["YLabel"])',
				colorByPoint: false,
				data: seriesLast
			}
		]

	});

	function ChangeChartType(option) {
		chartPlot.update({
			yAxis: {
				type: option
			}
		});
		chartBar.update({
			yAxis: {
				type: option
			}
		});
	}

	$("#ChartType .btn").on('click', function () {

		$(this).parent().children().removeClass('active');
		$(this).addClass('active');

		ChangeChartType($(this).text().toLowerCase().trim());

		//console.log($(this).text().toLowerCase().trim());

		//console.log(this); // points to the clicked input button

	});

	function ShowCountries(countries) {
		var series = chartPlot.series;
		for (var i = 0; i < series.length; i++) {

			if (countries.indexOf(series[i].name) >= 0) {
				series[i].setVisible(true, false);
			}
			else {
				series[i].setVisible(false, false);
			}
		}
		chartPlot.redraw();

		let seriesLastFilter = seriesLast.slice().filter(country => countries.indexOf(country.name) >= 0);

		chartBar.series[0].update({
			data: seriesLastFilter
		}, true); //true / false to redraw
	}

	$("#America").on('click', function () {
		var AmericaList = ["Argentina", "Bolivia", "Brazil", "Canada", "Chile", "Colombia", "Cuba", "Ecuador", "Guatemala", "Haiti", "Mexico", "Peru", "US", "Venezuela"];
		ShowCountries(AmericaList);
	});

	$("#Europe").on('click', function () {
		var EuropeList = ["Spain", "Czechia", "France", "Belgium", "Germany", "Greece", "Italy", "Netherlands", "Poland", "Portugal", "Romania", "Russia", "Sweden", "Ukraine", "United Kingdom"];
		ShowCountries(EuropeList);
	});

	$("#All").on('click', function () {
		$(chartPlot.series).each(function () {
			this.setVisible(true, false);
		});
		chartPlot.redraw();

		chartBar.series[0].update({
			data: seriesLast
		}, true); //true / false to redraw
	});



</script>